// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolManagmen;

#nullable disable

namespace SchoolManagmen.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240916041203_applicationUserisdisabled")]
    partial class applicationUserisdisabled
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.1.24451.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "permissions",
                            ClaimValue = "teachers:read",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "permissions",
                            ClaimValue = "teachers:add",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "permissions",
                            ClaimValue = "teachers:update",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "permissions",
                            ClaimValue = "teachers:delete",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "permissions",
                            ClaimValue = "subjects:read",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "permissions",
                            ClaimValue = "subjects:add",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "permissions",
                            ClaimValue = "subjects:update",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "permissions",
                            ClaimValue = "subjects:delete",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "permissions",
                            ClaimValue = "students:read",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "permissions",
                            ClaimValue = "students:add",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "permissions",
                            ClaimValue = "students:update",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "permissions",
                            ClaimValue = "students:delete",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "permissions",
                            ClaimValue = "gradeReports:read",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "permissions",
                            ClaimValue = "gradeReports:add",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "permissions",
                            ClaimValue = "gradeReports:update",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "permissions",
                            ClaimValue = "gradeReports:delete",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "permissions",
                            ClaimValue = "enrollments:read",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "permissions",
                            ClaimValue = "enrollments:add",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "permissions",
                            ClaimValue = "enrollments:update",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "permissions",
                            ClaimValue = "enrollments:delete",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "permissions",
                            ClaimValue = "classes:read",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 22,
                            ClaimType = "permissions",
                            ClaimValue = "classes:add",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 23,
                            ClaimType = "permissions",
                            ClaimValue = "classes:update",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 24,
                            ClaimType = "permissions",
                            ClaimValue = "classes:delete",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 25,
                            ClaimType = "permissions",
                            ClaimValue = "courses:read",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 26,
                            ClaimType = "permissions",
                            ClaimValue = "courses:add",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 27,
                            ClaimType = "permissions",
                            ClaimValue = "courses:update",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 28,
                            ClaimType = "permissions",
                            ClaimValue = "courses:delete",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 29,
                            ClaimType = "permissions",
                            ClaimValue = "attendance:read",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 30,
                            ClaimType = "permissions",
                            ClaimValue = "attendance:add",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 31,
                            ClaimType = "permissions",
                            ClaimValue = "attendance:update",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 32,
                            ClaimType = "permissions",
                            ClaimValue = "attendance:delete",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 33,
                            ClaimType = "permissions",
                            ClaimValue = "users:read",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 34,
                            ClaimType = "permissions",
                            ClaimValue = "users:add",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 35,
                            ClaimType = "permissions",
                            ClaimValue = "users:update",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 36,
                            ClaimType = "permissions",
                            ClaimValue = "roles:read",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 37,
                            ClaimType = "permissions",
                            ClaimValue = "roles:add",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        },
                        new
                        {
                            Id = 38,
                            ClaimType = "permissions",
                            ClaimValue = "roles:update",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "67673230-c86c-487b-aa1f-1b14e99b0a61",
                            RoleId = "60588eb9-1a69-4794-afe6-47f1edd8a3f4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolManagmen.Entites.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "60588eb9-1a69-4794-afe6-47f1edd8a3f4",
                            ConcurrencyStamp = "fdf628eb-27b3-424e-b21a-29f4270bd15d",
                            IsDefault = false,
                            IsDeleted = false,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "98906716-db5b-4520-b554-4ee0e751e6f2",
                            ConcurrencyStamp = "ab98841f-1c69-4025-83ba-2f1ddd0f81c5",
                            IsDefault = true,
                            IsDeleted = false,
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("SchoolManagmen.Entites.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "67673230-c86c-487b-aa1f-1b14e99b0a61",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "409b5734-71c7-401d-b38b-4ae56dc4e62c",
                            Email = "admin@SchoolManagmen.com",
                            EmailConfirmed = true,
                            FirstName = "SchoolManagmen",
                            IsDisabled = false,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@SCHOOLMANAGMEN.COM",
                            NormalizedUserName = "ADMIN@SCHOOLMANAGMEN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHuv2bYEituDXKXteB27y+QYvCFa+/0D1/noJXMT6FuP9ZRcv6yU81h8b4psNY5B5w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ddc9ad66e3e9461292f482980bbf7228",
                            TwoFactorEnabled = false,
                            UserName = "admin@SchoolManagmen.com"
                        });
                });

            modelBuilder.Entity("SchoolManagmen.Entites.Attendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttendanceId"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("AttendanceId");

                    b.HasIndex("StudentId", "Date")
                        .IsUnique();

                    b.ToTable("Attendance", (string)null);
                });

            modelBuilder.Entity("SchoolManagmen.Entites.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradeLevel")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("ClassId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("SchoolManagmen.Entites.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("CourseName", "TeacherId")
                        .IsUnique();

                    b.ToTable("Courses", (string)null);
                });

            modelBuilder.Entity("SchoolManagmen.Entites.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("EnrollmentDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Grade")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("SchoolManagmen.Entites.GradeReport", b =>
                {
                    b.Property<int>("GradeReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradeReportId"));

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<decimal>("Grade")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("GradeReportId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId", "CourseId")
                        .IsUnique();

                    b.ToTable("GradeReports", (string)null);
                });

            modelBuilder.Entity("SchoolManagmen.Entites.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("StudentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.HasIndex("UpdatedById");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SchoolManagmen.Entites.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("SchoolManagmen.Entites.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Email must be in a valid format, e.g., example@domain.com")
                        .HasAnnotation("RegularExpression", "^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Phone number should be in Egyptian format, e.g., +201XXXXXXXXX or 01XXXXXXXXX")
                        .HasAnnotation("RegularExpression", "^(?:\\+20|0)?1[0-2]\\d{8}$");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TeacherId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Teachers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("SchoolManagmen.Entites.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SchoolManagmen.Entites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SchoolManagmen.Entites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("SchoolManagmen.Entites.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagmen.Entites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SchoolManagmen.Entites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagmen.Entites.ApplicationUser", b =>
                {
                    b.OwnsMany("SchoolManagmen.Entities.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("ExpiresOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("RevokedOn")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId", "Id");

                            b1.ToTable("RefreshTokens", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("SchoolManagmen.Entites.Attendance", b =>
                {
                    b.HasOne("SchoolManagmen.Entites.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagmen.Entites.Class", b =>
                {
                    b.HasOne("SchoolManagmen.Entites.Teacher", "Teacher")
                        .WithMany("Classes")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolManagmen.Entites.Course", b =>
                {
                    b.HasOne("SchoolManagmen.Entites.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolManagmen.Entites.Enrollment", b =>
                {
                    b.HasOne("SchoolManagmen.Entites.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagmen.Entites.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagmen.Entites.GradeReport", b =>
                {
                    b.HasOne("SchoolManagmen.Entites.Course", "Course")
                        .WithMany("GradeReports")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagmen.Entites.Student", "Student")
                        .WithMany("GradeReports")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagmen.Entites.Student", b =>
                {
                    b.HasOne("SchoolManagmen.Entites.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagmen.Entites.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("SchoolManagmen.Entites.Subject", b =>
                {
                    b.HasOne("SchoolManagmen.Entites.Teacher", "Teacher")
                        .WithMany("Subjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolManagmen.Entites.Course", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("GradeReports");
                });

            modelBuilder.Entity("SchoolManagmen.Entites.Student", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Enrollments");

                    b.Navigation("GradeReports");
                });

            modelBuilder.Entity("SchoolManagmen.Entites.Teacher", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Courses");

                    b.Navigation("Subjects");
                });
#pragma warning restore 612, 618
        }
    }
}
